package sudo.ku;

import java.time.Clock;
import java.util.ArrayList;
import java.util.Scanner;

public class SudoKu {

    public static int[][] sudoku;
    public static int[][] example = {
        {5, 3, 4, 6, 7, 8, 9, 1, 2},
        {6, 0, 2, 0, 9, 5, 3, 4, 8},
        {1, 9, 8, 3, 4, 2, 5, 6, 7},
        {8, 5, 9, 7, 6, 1, 4, 2, 3},
        {4, 2, 6, 8, 5, 3, 7, 9, 1},
        {7, 1, 3, 9, 2, 4, 8, 5, 6},
        {9, 6, 1, 5, 3, 7, 2, 8, 4},
        {2, 0, 7, 0, 1, 9, 6, 3, 5},
        {3, 4, 5, 2, 8, 6, 1, 7, 9}
    };

    /**
     * 5 3 4 6 7 8 9 1 2
     * 6 0 2 0 9 5 3 4 8
     * 1 9 8 3 4 2 5 6 7
     * 8 5 9 7 6 1 4 2 3
     * 4 2 6 8 5 3 7 9 1
     * 7 1 3 9 2 4 8 5 6
     * 9 6 1 5 3 7 2 8 4
     * 2 0 7 0 1 9 6 3 5
     * 3 4 5 2 8 6 1 7 9
     *
     * @param args
     */
    public static void main(String[] args) {
        sudoku = new int[9][9];

//        Scanner reader = new Scanner(System.in);
//        for (int i = 0; i < sudoku.length; i++) {
//            for (int j = 0; j < sudoku.length; j++) {
//                sudoku[i][j] = reader.nextInt();
//            }
//        }
        sudoku = example;

        while (!isSolved()) {
            for (int i = 0; i < sudoku.length; i++) {
                solveLine(i);
                solveColumn(i);
                printSudoku();
                return;
            }
        }
        
        printSudoku();
    }

    public static boolean isSolved() {
        for (int x = 0; x < sudoku.length; x++) {
            for (int y = 0; y < sudoku.length; y++) {
                if (sudoku[x][y] == 0) {
                    return false;
                }
            }
        }
        return true;
    }

    public static void printSudoku() {
        for (int i = 0; i < sudoku.length; i++) {
            for (int j = 0; j < sudoku.length; j++) {
                System.out.print(sudoku[i][j] + " ");                
            }
            System.out.println();
        }
    }

    public static void solveLine(int x) {
        ArrayList<Integer> availableValues = new ArrayList<>();
        for (int i = 0; i < sudoku.length; i++) {
            availableValues.add(i + 1);
        }
        System.out.println(availableValues.toString());

        boolean hasEmptySlot = false;
        int emptySlot = 10;
        for (int y = 0; y < sudoku.length; y++) {
            int value = sudoku[x][y];
            if (value != 0) {
                availableValues.remove(y);
            } else {
                hasEmptySlot = true;
                emptySlot = y;
            }
        }

        if (hasEmptySlot && (availableValues.size() == 1)) {
            sudoku[x][emptySlot] = availableValues.get(0);
        }
    }

    public static void solveColumn(int y) {
        ArrayList<Integer> availableValues = new ArrayList<>();
        for (int i = 0; i < sudoku.length; i++) {
            availableValues.add(i + 1);
        }

        boolean hasEmptySlot = false;
        int emptySlot = 10;
        for (int x = 0; x < sudoku.length; x++) {
            int value = sudoku[x][y];
            if (value != 0) {
                availableValues.remove(x);
            } else {
                hasEmptySlot = true;
                emptySlot = x;
            }
        }

        if (hasEmptySlot && (availableValues.size() == 1)) {
            sudoku[emptySlot][y] = availableValues.get(0);
        }
    }

    public static void solveSquare(int startRow, int startCol) {
        ArrayList<Integer> availableValues = new ArrayList<>();
        for (int i = 0; i < sudoku.length; i++) {
            availableValues.add(i + 1);
        }

        boolean hasEmptySlot = false;
        int emptyX = 10;
        int emptyY = 10;

        for (int x = startRow; x < startRow + 3; x++) {
            for (int y = startCol; y < startCol + 3; y++) {
                int value = sudoku[x][y];
                if (value != 0) {
                    availableValues.remove(value);
                } else {
                    hasEmptySlot = true;
                    emptyX = x;
                    emptyY = y;
                }
            }
        }

        if (hasEmptySlot && (availableValues.size() == 1)) {
            sudoku[emptyX][emptyY] = availableValues.get(0);
        }
    }
}
